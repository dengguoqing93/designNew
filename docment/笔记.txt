设计原则：
    1、找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起（开放封闭原则）。
把会变化的部分取出并封装起来，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。所有
的模式都提供了一套方法让“系统中的某部分改变不会影响其他部分”
    2、针对接口编程而不是针对实现编程
    3、多用组合少用继承
    4、为了交互对象之间的松耦合而努力
    5、类应该对拓展开放，对修改关闭
    6、要依赖抽象，不要依赖具体类（依赖倒置原则）
    7、最少知识原则：只和你的密友谈话



设计模式：
    1、策略模式(strategy)定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
    2、观察者模式(observer)定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更新
    3、装饰者模式(decorator)动态地将责任附加到对象上。若要拓展功能，装饰者提供了比继承更有弹性的替代方案
    4、工厂方法模式(factory)定义了一个创建对象的接口，但子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类
    5、单例模式(singleton)确保一个类只有一个实例，并提供一个全局访问点
    6、命令模式(command)将"请求"封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作
    7、适配器模式(adapter)将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间（必须是面向接口的编程才合适）
    8、外观模式(facade)提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
    9、模板方法模式(template)在一个方法中第一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，
  重新定义算法中的某些步骤
    10、迭代器模式(iterator)提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示
    11、组合模式(composite)允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合
    12、状态模式(state)允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类
    13、原型模式(prototype)：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。（Specify the kinds of objects to
create using a prototypical instance,and create new objects by copying this prototype.
    14、中介者(mediator)模式：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示地相互作用，从而使其耦合松散，而且可以独立地
改变它们的交互。
    15、责任链(chain)模式：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连城一条链，并沿着这
 条链传递该请求，直到有对象处理它为止。
    16、备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在对象那个之外保存这个状态，这样以后可将该对象恢复到原先保存的装填
    17、访问者模式：封装一些作用于某种数据结构中的各元素的操作，他可以在不改变数据结构的前提下定义作用域这些元素的新的操作
    18、给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子
    19、享元模式：使用共享对象可有效地支持大量的细粒度对象

开发小贴士：
    在系统的维护和变化上远比开发花的时间多。因此，要致力于提高代码的可维护性、可拓展性以及可复用性。
    设计是一门艺术，总是有许多可取舍的地方。要尽可能 采用这些经过深思熟虑，且经受过时间考验的设计模式
    松耦合的实际之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的互相依赖降到了最低
    通过动态组合对象，可以写心得代码添加新功能，而无需修改现有代码。
    如果没有改变现有代码，那么引进bug或产生意外副作用的机会将大幅度减少。
    针对接口编程，可以隔离掉以后系统可能发生的一大堆改变。如果代码时针对接口而写，那么通过多态，可以与任何
新类实现该接口。