设计原则：
    1、找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起（开放封闭原则）。
把会变化的部分取出并封装起来，以便以后可以轻易地改动或扩充此部分，而不影响不需要变化的其他部分。所有
的模式都提供了一套方法让“系统中的某部分改变不会影响其他部分”
    2、针对接口编程而不是针对实现编程
    3、多用组合少用继承
    4、为了交互对象之间的松耦合而努力
    5、类应该对拓展开放，对修改关闭
    6、要依赖抽象，不要依赖具体类（依赖倒置原则）



设计模式：
    1、策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
    2、观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更新
    3、装饰者模式动态地将责任附加到对象上。若要拓展功能，装饰者提供了比继承更有弹性的替代方案
    4、工厂方法模式定义了一个创建对象的接口，但子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类









开发小贴士：
    在系统的维护和变化上远比开发花的时间多。因此，要致力于提高代码的可维护性、可拓展性以及可复用性。
    设计是一门艺术，总是有许多可取舍的地方。要尽可能 采用这些经过深思熟虑，且经受过时间考验的设计模式
    松耦合的实际之所以能让我们建立有弹性的OO系统，能够应对变化，是因为对象之间的互相依赖降到了最低
    通过动态组合对象，可以写心得代码添加新功能，而无需修改现有代码。
    如果没有改变现有代码，那么引进bug或产生意外副作用的机会将大幅度减少。
    针对接口编程，可以隔离掉以后系统可能发生的一大堆改变。如果代码时针对接口而写，那么通过多态，可以与任何
新类实现该接口。